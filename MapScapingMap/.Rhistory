library(tidyverse)
library(shiny)
library(sf)
library(leaflet)
title_list = read_tsv('geocoded_addresses.tsv')
interviewees = read_tsv('geocoded_addresses.tsv')
rm(title_list)
ui = fluidPage(
titlePanel("Newspaper Map"),
sidebarLayout(
sidebarPanel = sidebarPanel(sliderInput('years', 'Years', min = 1621, max = 2000, value = c(1700, 1750))),
mainPanel = mainPanel(
leafletOutput(outputId = 'map')
)
)
)
server = function(input, output){
map_df = reactive({
title_list %>%
filter(first_date_held > input$years[1] & first_date_held < input$years[2]) %>%
count(coverage_city, name = 'titles') %>%
left_join(coordinates_list, by = 'coverage_city')%>%
filter(!is.na(lng) & !is.na(lat)) %>%
st_as_sf(coords = c('lng', 'lat')) %>%
st_set_crs(4326)
})
output$map = renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = -5, lat = 54, zoom = 5) %>%
addCircleMarkers(data = map_df(), radius = ~sqrt(titles))
})
}
shinyApp(ui, server)
View(interviewees)
runApp()
runApp()
runApp()
runApp()
View(interviewees)
runApp()
runApp()
names(interviewees)
class(interviewees$longitude)
runApp()
runApp()
runApp()
runApp()
runApp()
my_df <- interviewees
spec(my_df)
runApp()
print(colnames(interviewees))
runApp()
runApp()
runApp()
leaflet() %>%
addTiles() %>%
setView(lng = -5, lat = 54, zoom = 2) %>%
addCircleMarkers(data = map_df(), radius = ~sqrt(number_of_interviews))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
spec(interviewees)
runApp()
runApp()
categories <- interviewees %>%
select(Categories) %>%
distinct() %>%
separate_rows(Categories, sep = ",") %>%
pull(Categories) %>%
unique()
categories
categories <- interviewees %>%
select(Categories) %>%
distinct() %>%
separate_rows(Categories, sep = ",") %>%
mutate(Categories = str_trim(Categories)) %>%
filter(!is.na(Categories) & Categories != "") %>%
pull(Categories) %>%
unique()
categories
runApp()
runApp()
install.packages("shinyWidgets")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
